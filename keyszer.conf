# Define timeout for multipurpose_modmap
timeouts(
    multipurpose = 0,
    suspend = 1,
)

emergency_eject_key(Key.CAPSLOCK)

# [Global modemap] Change modifier keys as in xmodmap
# modmap("default", {
#     Key.CAPSLOCK: Key.LEFT_CTRL
# })

# [Conditional modmap] Change modifier keys in certain applications
modmap("Emacs",{
    Key.RIGHT_CTRL: Key.ESC,
}, when = wm_class_match(r"Emacs"))

# See for keys enum `cat /opt/pipx/venvs/keyszer/lib/python<your.version>/site-packages/keyszer/models/key.py`
# Also see `sudo evtest` (need to disable keyszer first `sudo systemctl stop
# keyszer`) to get the enum key by it's right side (number - code from report's
# 2nd line after clicking on desired key).
keymap("universal symbol layer", {
    # Not working (why?).
    C("LC-LAlt-LMeta-F1"): C("Shift-KEY_1"), # !

    C("LC-LAlt-LMeta-F2"): C("p"), # '
    C("LC-LAlt-LMeta-LShift-F2"): C("o"), # "

    C("LC-LAlt-LMeta-F4"): C("Shift-h"), # ;

    C("LC-LAlt-LMeta-F6"): C("Shift-u"), # :
    C("LC-LAlt-LMeta-LShift-F6"): C("Shift-KEY_6"), # :

    C("LC-LAlt-LMeta-F7"): C("Shift-KEY_8"), # ?
    C("LC-LAlt-LMeta-LShift-F7"): C("Shift-KEY_7"), # &

    C("LC-LAlt-LMeta-F8"): C("Shift-KEY_8"), # TODO

    C("LC-LAlt-LMeta-F9"): C("right_brace"), # (

    C("LC-LAlt-LMeta-F10"): C("backslash"), # )

    C("LC-LAlt-LMeta-F13"): C("n"), # -

    C("LC-LAlt-LMeta-F14"): C("minus"), # =
    C("LC-LAlt-LMeta-LShift-F14"): C("Shift-n"), # +

    # Not working F15.

    C("LC-LAlt-LMeta-F16"): C("Shift-p"), # ]
    C("LC-LAlt-LMeta-LShift-F16"): C("Shift-backslash"), # }

    C("LC-LAlt-LMeta-F17"): C("Shift-KEY_9"), # <

    C("LC-LAlt-LMeta-F18"): C("Shift-KEY_0"), # >

    C("LC-LAlt-LMeta-F19"): C("equal"), # \
    C("LC-LAlt-LMeta-LShift-F19"): C("Shift-KEY_102ND"), # |

    C("LC-LAlt-LMeta-F20"): C("y"), # /

    C("LC-LAlt-LMeta-F21"): C("Shift-o"), # [
    C("LC-LAlt-LMeta-LShift-F21"): C("Shift-right_brace"), # {
})

# keymap("Emacs-like keys", {
#     # Cursor
#     C("C-b"): with_mark(C("left")),
#     C("C-f"): with_mark(C("right")),
#     C("C-p"): with_mark(C("up")),
#     C("C-n"): with_mark(C("down")),
#     C("C-h"): with_mark(C("backspace")),
#     # Forward/Backward word
#     C("Alt-b"): with_mark(C("C-left")),
#     C("Alt-f"): with_mark(C("C-right")),
#     # Beginning/End of line
#     C("C-a"): with_mark(C("left")),
#     C("C-e"): with_mark(C("right")),
#     # Page up/down
#     C("Alt-v"): with_mark(C("page_up")),
#     C("C-v"): with_mark(C("page_down")),
#     # Beginning/End of file
#     C("Alt-Shift-comma"): with_mark(C("C-home")),
#     C("Alt-Shift-dot"): with_mark(C("C-end")),
#     # Newline
#     C("C-m"): C("enter"),
#     C("C-j"): C("enter"),
#     C("C-o"): [C("enter"), C("left")],
#     # Copy
#     C("C-w"): [C("C-x"), set_mark(False)],
#     C("Alt-w"): [C("C-c"), set_mark(False)],
#     C("C-y"): [C("C-v"), set_mark(False)],
#     # Delete
#     C("C-d"): [C("delete"), set_mark(False)],
#     C("Alt-d"): [C("C-delete"), set_mark(False)],
#     # Kill line
#     C("C-k"): [C("Shift-end"), C("C-x"), set_mark(False)],
#     # Undo
#     C("C-slash"): [C("C-z"), set_mark(False)],
#     C("C-Shift-ro"): C("C-z"),
#     # Mark
#     C("C-space"): set_mark(True),
#     C("C-Alt-space"): with_or_set_mark(C("C-right")),
#     # Search
#     C("C-s"): C("F3"),
#     # C("C-r"): C("Shit-F3"),
#     C("Alt-Shift-key_5"): C("C-h"),
#     # Cancel
#     C("C-g"): [C("esc"), set_mark(False)],
#     # Escape
#     C("C-q"): escape_next_key,
#     # C-x YYY
#     C("C-x"): {
#         # C-x h (select all)
#         C("h"): [C("C-home"), C("C-a"), set_mark(True)],
#         # C-x C-f (open)
#         C("C-f"): C("C-o"),
#         # C-x C-s (save)
#         C("C-s"): C("C-s"),
#         # C-x k (kill tab)
#         C("k"): C("C-f4"),
#         # C-x C-c (exit)
#         C("C-c"): C("C-q"),
#         # cancel
#         C("C-g"): ignore_key,
#         # C-x u (undo)
#         C("u"): [C("C-z"), set_mark(False)],
#     }
# }, when = lambda ctx: ctx.wm_class not in ("Emacs", "URxvt"))

# vi:set filetype=python
